require(TEST_HELPER)
// var db = require(__server + '/lib/knex-driver')
var request = require('supertest-as-promised')
var <%= namePluralCapitalized %>API = require(__server + '/apis/<%= namePlural %>-api.js')


describe('<%= namePluralCapitalized %> API', function() {

  var app = TestHelper.createApp()

  //
  // Simulate a signed-in user by hardcoding a value.
  // This allows us to test without hitting any APIs / databases for sessions.
  //
  var mock = { user: null }

  app.use(function(req, res, next) {
    req.user = mock.user
    next()
  })
  app.use('/', <%= namePluralCapitalized %>API)
  app.testReady()


  beforeEach_(function * () {
    mock.user = { id: 10, name: 'Alice', email: 'alice@example.com' }
    // yield db.deleteEverything()
  })
<% if ( endpoints[0] && endpoints[1] ) { -%>

  it_('creates and retrieves a <%= name %> by collection', function * () {
    var new<%= nameCapitalized %>Attrs = { /* TODO: FILL IN */ }
    var created<%= nameCapitalized %> = null

    yield request(app)
      .post('/<%= namePlural %>')
      .send(new<%= nameCapitalized %>Attrs)
      .expect(201)
      .expect(function(response) {
        created<%= nameCapitalized %> = response.body

        expect( created<%= nameCapitalized %>.id ).to.be.a('number')
        expect( created<%= nameCapitalized %> ).to.containSubset(new<%= nameCapitalized %>Attrs)
      })

    yield request(app)
      .get('/<%= namePlural %>')
      .expect(200)
      .expect(function (response) {
        expect( response.body ).to.deep.equal( created<%= nameCapitalized %> )
      })
  })
<% } -%><% if ( endpoints[1] && endpoints[2] ) { -%>

  it_('creates and retrieves a <%= name %> by id', function * () {
    var new<%= nameCapitalized %>Attrs = { /* TODO: FILL IN */ }
    var created<%= nameCapitalized %> = null

    yield request(app)
      .post('/<%= namePlural %>')
      .send(new<%= nameCapitalized %>Attrs)
      .expect(201)
      .expect(function(response) {
        created<%= nameCapitalized %> = response.body

        expect( created<%= nameCapitalized %>.id ).to.be.a('number')
        expect( created<%= nameCapitalized %> ).to.containSubset(new<%= nameCapitalized %>Attrs)
      })

    yield request(app)
      .get(`/<%= namePlural %>/${ created<%= nameCapitalized %>.id }`)
      .expect(200)
      .expect(function (response) {
        expect( response.body ).to.deep.equal( created<%= nameCapitalized %> )
      })
  })
<% } -%><% if ( endpoints[1] && endpoints[3] ) { -%>

  it_('creates and updates a <%= name %>', function * () {
    var new<%= nameCapitalized %>Attrs = { /* TODO: FILL IN */ }
    var created<%= nameCapitalized %> = null

    yield request(app)
      .post('/<%= namePlural %>')
      .send(new<%= nameCapitalized %>Attrs)
      .expect(201)
      .expect(function(response) {
        created<%= nameCapitalized %> = response.body

        expect( created<%= nameCapitalized %>.id ).to.be.a('number')
        expect( created<%= nameCapitalized %> ).to.containSubset(new<%= nameCapitalized %>Attrs)
      })

    var updateAttrs = Object.assign({}, created<%= nameCapitalized %>, {
      // TODO: FILL IN
    })
    delete updateAttrs.id

    yield request(app)
      .put(`/<%= namePlural %>/${ created<%= nameCapitalized %>.id }`)
      .send(updateAttrs)
      .expect(200)
      .expect(function (response) {
        expect( response.body.id ).to.equal( created<%= nameCapitalized %>.id )
        expect( response.body ).to.containSubset( updateAttrs )
      })
  })
<% } -%>})
